function _0x302f(_0x3cc2e9, _0x1d6297) {
  const _0x55c20f = _0x52c4();
  return _0x302f = function (_0x344073, _0x181f27) {
    _0x344073 = _0x344073 - (0x117d - 0x805 - 0x1c * 0x53);
    let _0x2e7228 = _0x55c20f[_0x344073];
    return _0x2e7228;
  }, _0x302f(_0x3cc2e9, _0x1d6297);
}
const _0x374ef = _0x302f;

(function (_0x1975eb, _0x44465b) {
  const _0x4e6f72 = _0x302f, _0x1b632 = _0x1975eb();
  while (!![]) {
    try {
      const _0x2a3621 = -parseInt(_0x4e6f72(0xa1)) / (-0xa7 * 0x17 - 0xc78 + 0x1b7a)
        + -parseInt(_0x4e6f72(0x6d)) / (-0x231c + 0xece + 0x1450) * (-parseInt(_0x4e6f72(0x9c)) / (0x2211 - 0x61d - 0x1bf1))
        + -parseInt(_0x4e6f72(0xab)) / (0x1052 + 0x1834 - 0x2882)
        + parseInt(_0x4e6f72(0x64)) / (-0x2410 - 0x64f + 0x4 * 0xa99)
        + parseInt(_0x4e6f72(0x71)) / (-0xffd - 0x2346 + 0x3349) * (parseInt(_0x4e6f72(0x82)) / (0x2 * -0x1f3 - 0x120c + 0xf * 0x177))
        + parseInt(_0x4e6f72(0xa9)) / (-0x22cd + 0x4 * -0x7f3 + 0x1cd * 0x25) * (-parseInt(_0x4e6f72(0xae)) / (0x3 * -0x8e4 + 0x1466 + 0x64f))
        + -parseInt(_0x4e6f72(0xb1)) / (-0xae7 - 0x1254 + 0x1d45) * (parseInt(_0x4e6f72(0xb2)) / (0x92b - 0x45 * 0x8b + 0x1c57));
      if (_0x2a3621 === _0x44465b) break;
      else _0x1b632['push'](_0x1b632['shift']());
    } catch (_0x1c2389) {
      _0x1b632['push'](_0x1b632['shift']());
    }
  }
}(_0x52c4, -0x6db7 * 0x5 + -0xd9bd * 0x3 + 0x4 * 0xab8c));

const { spawn } = require(_0x374ef(0xc5) + _0x374ef(0x7b)),
  axios = require(_0x374ef(0x99)),
  logger = require(_0x374ef(0x91) + 'g'),
  express = require(_0x374ef(0x73)),
  path = require(_0x374ef(0x74)),
  app = express(),
  port = process[_0x374ef(0x6f)][_0x374ef(0x88)] || 0x1871 + 0x2a19 - 0x16 * 0x197;

function _0x52c4() {
  const _0x309687 = [
    // ... (à¦¸à¦¬ string table à¦¸à§‡à¦® à¦†à¦›à§‡)
  ];
  _0x52c4 = function () { return _0x309687; };
  return _0x52c4();
}

app[_0x374ef(0x95)]('/', function (_0x53dc08, _0x29d53f) {
  const _0x518376 = _0x374ef, _0x16ffed = { 'jLrfF': _0x518376(0xb3) + 'l' };
  _0x29d53f[_0x518376(0xd4)](path[_0x518376(0x81)](__dirname, _0x16ffed[_0x518376(0xd5)]));
});

app[_0x374ef(0x90)](port, () => {
  logger("Server is running on port " + port, "[ INFO ]");
});

// ðŸ”¥ Update Checker (GitHub à¦¥à§‡à¦•à§‡ à¦¨à¦¾à¦® à¦¬à¦¦à¦²à¦¾à¦¨à§‹ à¦¹à§Ÿà§‡à¦›à§‡)
axios.get("https://raw.githubusercontent.com/NkNaiem/NK-Naiem-Khan-CHAT-BOT/main/package.json")
  .then(res => {
    logger(res.data.name, "[ NAME ]");
    logger("Version: " + res.data.version, "[ VERSION ]");
    logger(res.data.description, "[ DESCRIPTION ]");
  })
  .catch(err => {
    logger("Update error: " + err.code, "[ Update ERROR ]");
  });

startBot();
